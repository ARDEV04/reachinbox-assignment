{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\prj\\\\intern_ass\\\\reachinbox-assignment\\\\src\\\\components\\\\ThreadDeletion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './ThreadDeletion.css';\n\n/**\r\n * ThreadDeletion component - Handles the deletion of email threads\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Object} props.thread - The thread to be deleted\r\n * @param {string} props.token - Authentication token\r\n * @param {Function} props.onDeleteSuccess - Callback function when deletion is successful\r\n * @param {Function} props.onDeleteError - Callback function when deletion fails\r\n * @param {Function} props.onDeleteStart - Callback function when deletion starts\r\n * @param {boolean} props.showConfirmation - Whether to show a confirmation dialog before deletion\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreadDeletion = ({\n  thread,\n  token,\n  onDeleteSuccess,\n  onDeleteError,\n  onDeleteStart,\n  showConfirmation = true\n}) => {\n  _s();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  // Function to handle the deletion process\n  const handleDelete = async () => {\n    if (!thread || !thread.threadId) {\n      console.error('No thread or thread ID provided for deletion');\n      if (onDeleteError) {\n        onDeleteError(new Error('No thread or thread ID provided for deletion'));\n      }\n      return;\n    }\n\n    // If confirmation is required and dialog is not shown yet, show it\n    if (showConfirmation && !showConfirmDialog) {\n      setShowConfirmDialog(true);\n      return;\n    }\n\n    // Reset confirmation dialog if it was shown\n    setShowConfirmDialog(false);\n\n    // Set deleting state\n    setIsDeleting(true);\n\n    // Call the onDeleteStart callback if provided\n    if (onDeleteStart) {\n      onDeleteStart(thread);\n    }\n    try {\n      // Make the API call to delete the thread\n      const config = {\n        method: 'delete',\n        maxBodyLength: Infinity,\n        url: `https://hiring.reachinbox.xyz/api/v1/onebox/messages/${thread.threadId}`,\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      const response = await axios.request(config);\n      console.log(\"Delete response:\", JSON.stringify(response.data));\n\n      // Call the onDeleteSuccess callback if provided\n      if (onDeleteSuccess) {\n        onDeleteSuccess(thread, response.data);\n      }\n    } catch (error) {\n      console.error(\"Error deleting thread:\", error);\n\n      // Call the onDeleteError callback if provided\n      if (onDeleteError) {\n        onDeleteError(error, thread);\n      }\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  // Function to cancel deletion (close confirmation dialog)\n  const cancelDelete = () => {\n    setShowConfirmDialog(false);\n  };\n\n  // Render confirmation dialog if needed\n  if (showConfirmDialog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-deletion-confirmation\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you sure you want to delete this thread?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"thread-subject\",\n        children: thread.subject || 'No Subject'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: cancelDelete,\n          disabled: isDeleting,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-button\",\n          onClick: handleDelete,\n          disabled: isDeleting,\n          children: isDeleting ? 'Deleting...' : 'Confirm Delete'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render delete button\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `thread-delete-button ${isDeleting ? 'deleting' : ''}`,\n    onClick: handleDelete,\n    disabled: isDeleting,\n    title: \"Delete Thread (D)\",\n    children: isDeleting ? 'Deleting...' : 'Delete'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(ThreadDeletion, \"8rFNROPb7OrZnOYiQtyIR9p5gXI=\");\n_c = ThreadDeletion;\nexport default ThreadDeletion;\nvar _c;\n$RefreshReg$(_c, \"ThreadDeletion\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ThreadDeletion","thread","token","onDeleteSuccess","onDeleteError","onDeleteStart","showConfirmation","_s","isDeleting","setIsDeleting","showConfirmDialog","setShowConfirmDialog","handleDelete","threadId","console","error","Error","config","method","maxBodyLength","Infinity","url","headers","response","request","log","JSON","stringify","data","cancelDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","subject","onClick","disabled","title","_c","$RefreshReg$"],"sources":["D:/OneDrive/Desktop/prj/intern_ass/reachinbox-assignment/src/components/ThreadDeletion.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './ThreadDeletion.css';\r\n\r\n/**\r\n * ThreadDeletion component - Handles the deletion of email threads\r\n * \r\n * @param {Object} props - Component props\r\n * @param {Object} props.thread - The thread to be deleted\r\n * @param {string} props.token - Authentication token\r\n * @param {Function} props.onDeleteSuccess - Callback function when deletion is successful\r\n * @param {Function} props.onDeleteError - Callback function when deletion fails\r\n * @param {Function} props.onDeleteStart - Callback function when deletion starts\r\n * @param {boolean} props.showConfirmation - Whether to show a confirmation dialog before deletion\r\n */\r\nconst ThreadDeletion = ({ \r\n  thread, \r\n  token, \r\n  onDeleteSuccess, \r\n  onDeleteError, \r\n  onDeleteStart,\r\n  showConfirmation = true \r\n}) => {\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n\r\n  // Function to handle the deletion process\r\n  const handleDelete = async () => {\r\n    if (!thread || !thread.threadId) {\r\n      console.error('No thread or thread ID provided for deletion');\r\n      if (onDeleteError) {\r\n        onDeleteError(new Error('No thread or thread ID provided for deletion'));\r\n      }\r\n      return;\r\n    }\r\n\r\n    // If confirmation is required and dialog is not shown yet, show it\r\n    if (showConfirmation && !showConfirmDialog) {\r\n      setShowConfirmDialog(true);\r\n      return;\r\n    }\r\n\r\n    // Reset confirmation dialog if it was shown\r\n    setShowConfirmDialog(false);\r\n    \r\n    // Set deleting state\r\n    setIsDeleting(true);\r\n    \r\n    // Call the onDeleteStart callback if provided\r\n    if (onDeleteStart) {\r\n      onDeleteStart(thread);\r\n    }\r\n    \r\n    try {\r\n      // Make the API call to delete the thread\r\n      const config = {\r\n        method: 'delete',\r\n        maxBodyLength: Infinity,\r\n        url: `https://hiring.reachinbox.xyz/api/v1/onebox/messages/${thread.threadId}`,\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      };\r\n      \r\n      const response = await axios.request(config);\r\n      console.log(\"Delete response:\", JSON.stringify(response.data));\r\n      \r\n      // Call the onDeleteSuccess callback if provided\r\n      if (onDeleteSuccess) {\r\n        onDeleteSuccess(thread, response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting thread:\", error);\r\n      \r\n      // Call the onDeleteError callback if provided\r\n      if (onDeleteError) {\r\n        onDeleteError(error, thread);\r\n      }\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  };\r\n\r\n  // Function to cancel deletion (close confirmation dialog)\r\n  const cancelDelete = () => {\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  // Render confirmation dialog if needed\r\n  if (showConfirmDialog) {\r\n    return (\r\n      <div className=\"thread-deletion-confirmation\">\r\n        <p>Are you sure you want to delete this thread?</p>\r\n        <p className=\"thread-subject\">{thread.subject || 'No Subject'}</p>\r\n        <div className=\"confirmation-actions\">\r\n          <button \r\n            className=\"cancel-button\" \r\n            onClick={cancelDelete}\r\n            disabled={isDeleting}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button \r\n            className=\"confirm-button\" \r\n            onClick={handleDelete}\r\n            disabled={isDeleting}\r\n          >\r\n            {isDeleting ? 'Deleting...' : 'Confirm Delete'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render delete button\r\n  return (\r\n    <button \r\n      className={`thread-delete-button ${isDeleting ? 'deleting' : ''}`}\r\n      onClick={handleDelete}\r\n      disabled={isDeleting}\r\n      title=\"Delete Thread (D)\"\r\n    >\r\n      {isDeleting ? 'Deleting...' : 'Delete'}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ThreadDeletion;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}