{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import'./ResetOneBox.css';/**\r\n * ResetOneBox component - Handles resetting the OneBox data\r\n * \r\n * @param {Object} props - Component props\r\n * @param {string} props.token - Authentication token\r\n * @param {Function} props.onResetSuccess - Callback function when reset is successful\r\n * @param {Function} props.onResetError - Callback function when reset fails\r\n * @param {Function} props.onResetStart - Callback function when reset starts\r\n * @param {boolean} props.showConfirmation - Whether to show a confirmation dialog before reset\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ResetOneBox=_ref=>{let{token,onResetSuccess,onResetError,onResetStart,showConfirmation=true}=_ref;const[isResetting,setIsResetting]=useState(false);const[showConfirmDialog,setShowConfirmDialog]=useState(false);// Function to handle the reset process\nconst handleReset=async()=>{// If confirmation is required and dialog is not shown yet, show it\nif(showConfirmation&&!showConfirmDialog){setShowConfirmDialog(true);return;}// Reset confirmation dialog if it was shown\nsetShowConfirmDialog(false);// Set resetting state\nsetIsResetting(true);// Call the onResetStart callback if provided\nif(onResetStart){onResetStart();}try{// Make the API call to reset the OneBox data\nconst config={method:'get',maxBodyLength:Infinity,url:'https://hiring.reachinbox.xyz/api/v1/onebox/reset',headers:{'Authorization':`Bearer ${token}`}};const response=await axios.request(config);console.log(\"Reset response:\",JSON.stringify(response.data));// Call the onResetSuccess callback if provided\nif(onResetSuccess){onResetSuccess(response.data);}}catch(error){console.error(\"Error resetting OneBox data:\",error);// Call the onResetError callback if provided\nif(onResetError){onResetError(error);}}finally{setIsResetting(false);}};// Function to cancel reset (close confirmation dialog)\nconst cancelReset=()=>{setShowConfirmDialog(false);};// Render confirmation dialog if needed\nif(showConfirmDialog){return/*#__PURE__*/_jsxs(\"div\",{className:\"reset-confirmation\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"reset-warning\",children:\"\\u26A0\\uFE0F Warning: This will reset all your OneBox data!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Are you sure you want to reset all data? This action cannot be undone.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"confirmation-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"cancel-button\",onClick:cancelReset,disabled:isResetting,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{className:\"confirm-button\",onClick:handleReset,disabled:isResetting,children:isResetting?'Resetting...':'Confirm Reset'})]})]});}// Render reset button\nreturn/*#__PURE__*/_jsx(\"button\",{className:`reset-button ${isResetting?'resetting':''}`,onClick:handleReset,disabled:isResetting,title:\"Reset OneBox Data\",children:isResetting?'Resetting...':'Reset Data'});};export default ResetOneBox;","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","ResetOneBox","_ref","token","onResetSuccess","onResetError","onResetStart","showConfirmation","isResetting","setIsResetting","showConfirmDialog","setShowConfirmDialog","handleReset","config","method","maxBodyLength","Infinity","url","headers","response","request","console","log","JSON","stringify","data","error","cancelReset","className","children","onClick","disabled","title"],"sources":["D:/OneDrive/Desktop/prj/intern_ass/reachinbox-assignment/src/components/ResetOneBox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './ResetOneBox.css';\r\n\r\n/**\r\n * ResetOneBox component - Handles resetting the OneBox data\r\n * \r\n * @param {Object} props - Component props\r\n * @param {string} props.token - Authentication token\r\n * @param {Function} props.onResetSuccess - Callback function when reset is successful\r\n * @param {Function} props.onResetError - Callback function when reset fails\r\n * @param {Function} props.onResetStart - Callback function when reset starts\r\n * @param {boolean} props.showConfirmation - Whether to show a confirmation dialog before reset\r\n */\r\nconst ResetOneBox = ({ \r\n  token, \r\n  onResetSuccess, \r\n  onResetError, \r\n  onResetStart,\r\n  showConfirmation = true \r\n}) => {\r\n  const [isResetting, setIsResetting] = useState(false);\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n\r\n  // Function to handle the reset process\r\n  const handleReset = async () => {\r\n    // If confirmation is required and dialog is not shown yet, show it\r\n    if (showConfirmation && !showConfirmDialog) {\r\n      setShowConfirmDialog(true);\r\n      return;\r\n    }\r\n\r\n    // Reset confirmation dialog if it was shown\r\n    setShowConfirmDialog(false);\r\n    \r\n    // Set resetting state\r\n    setIsResetting(true);\r\n    \r\n    // Call the onResetStart callback if provided\r\n    if (onResetStart) {\r\n      onResetStart();\r\n    }\r\n    \r\n    try {\r\n      // Make the API call to reset the OneBox data\r\n      const config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://hiring.reachinbox.xyz/api/v1/onebox/reset',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      };\r\n      \r\n      const response = await axios.request(config);\r\n      console.log(\"Reset response:\", JSON.stringify(response.data));\r\n      \r\n      // Call the onResetSuccess callback if provided\r\n      if (onResetSuccess) {\r\n        onResetSuccess(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error resetting OneBox data:\", error);\r\n      \r\n      // Call the onResetError callback if provided\r\n      if (onResetError) {\r\n        onResetError(error);\r\n      }\r\n    } finally {\r\n      setIsResetting(false);\r\n    }\r\n  };\r\n\r\n  // Function to cancel reset (close confirmation dialog)\r\n  const cancelReset = () => {\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  // Render confirmation dialog if needed\r\n  if (showConfirmDialog) {\r\n    return (\r\n      <div className=\"reset-confirmation\">\r\n        <p className=\"reset-warning\">⚠️ Warning: This will reset all your OneBox data!</p>\r\n        <p>Are you sure you want to reset all data? This action cannot be undone.</p>\r\n        <div className=\"confirmation-actions\">\r\n          <button \r\n            className=\"cancel-button\" \r\n            onClick={cancelReset}\r\n            disabled={isResetting}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button \r\n            className=\"confirm-button\" \r\n            onClick={handleReset}\r\n            disabled={isResetting}\r\n          >\r\n            {isResetting ? 'Resetting...' : 'Confirm Reset'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render reset button\r\n  return (\r\n    <button \r\n      className={`reset-button ${isResetting ? 'resetting' : ''}`}\r\n      onClick={handleReset}\r\n      disabled={isResetting}\r\n      title=\"Reset OneBox Data\"\r\n    >\r\n      {isResetting ? 'Resetting...' : 'Reset Data'}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetOneBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}