{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\Desktop\\\\prj\\\\intern_ass\\\\reachinbox-assignment\\\\src\\\\components\\\\ResetOneBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './ResetOneBox.css';\n\n/**\r\n * ResetOneBox component - Handles resetting the OneBox data\r\n * \r\n * @param {Object} props - Component props\r\n * @param {string} props.token - Authentication token\r\n * @param {Function} props.onResetSuccess - Callback function when reset is successful\r\n * @param {Function} props.onResetError - Callback function when reset fails\r\n * @param {Function} props.onResetStart - Callback function when reset starts\r\n * @param {boolean} props.showConfirmation - Whether to show a confirmation dialog before reset\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetOneBox = ({\n  token,\n  onResetSuccess,\n  onResetError,\n  onResetStart,\n  showConfirmation = true\n}) => {\n  _s();\n  const [isResetting, setIsResetting] = useState(false);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  // Function to handle the reset process\n  const handleReset = async () => {\n    // If confirmation is required and dialog is not shown yet, show it\n    if (showConfirmation && !showConfirmDialog) {\n      setShowConfirmDialog(true);\n      return;\n    }\n\n    // Reset confirmation dialog if it was shown\n    setShowConfirmDialog(false);\n\n    // Set resetting state\n    setIsResetting(true);\n\n    // Call the onResetStart callback if provided\n    if (onResetStart) {\n      onResetStart();\n    }\n    try {\n      // Make the API call to reset the OneBox data\n      const config = {\n        method: 'get',\n        maxBodyLength: Infinity,\n        url: 'https://hiring.reachinbox.xyz/api/v1/onebox/reset',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      };\n      const response = await axios.request(config);\n      console.log(\"Reset response:\", JSON.stringify(response.data));\n\n      // Call the onResetSuccess callback if provided\n      if (onResetSuccess) {\n        onResetSuccess(response.data);\n      }\n    } catch (error) {\n      console.error(\"Error resetting OneBox data:\", error);\n\n      // Call the onResetError callback if provided\n      if (onResetError) {\n        onResetError(error);\n      }\n    } finally {\n      setIsResetting(false);\n    }\n  };\n\n  // Function to cancel reset (close confirmation dialog)\n  const cancelReset = () => {\n    setShowConfirmDialog(false);\n  };\n\n  // Render confirmation dialog if needed\n  if (showConfirmDialog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-confirmation\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"reset-warning\",\n        children: \"\\u26A0\\uFE0F Warning: This will reset all your OneBox data!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you sure you want to reset all data? This action cannot be undone.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: cancelReset,\n          disabled: isResetting,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-button\",\n          onClick: handleReset,\n          disabled: isResetting,\n          children: isResetting ? 'Resetting...' : 'Confirm Reset'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render reset button\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `reset-button ${isResetting ? 'resetting' : ''}`,\n    onClick: handleReset,\n    disabled: isResetting,\n    title: \"Reset OneBox Data\",\n    children: isResetting ? 'Resetting...' : 'Reset Data'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetOneBox, \"yqblFyn20wsnjp574+y7286jPYM=\");\n_c = ResetOneBox;\nexport default ResetOneBox;\nvar _c;\n$RefreshReg$(_c, \"ResetOneBox\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ResetOneBox","token","onResetSuccess","onResetError","onResetStart","showConfirmation","_s","isResetting","setIsResetting","showConfirmDialog","setShowConfirmDialog","handleReset","config","method","maxBodyLength","Infinity","url","headers","response","request","console","log","JSON","stringify","data","error","cancelReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","title","_c","$RefreshReg$"],"sources":["D:/OneDrive/Desktop/prj/intern_ass/reachinbox-assignment/src/components/ResetOneBox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './ResetOneBox.css';\r\n\r\n/**\r\n * ResetOneBox component - Handles resetting the OneBox data\r\n * \r\n * @param {Object} props - Component props\r\n * @param {string} props.token - Authentication token\r\n * @param {Function} props.onResetSuccess - Callback function when reset is successful\r\n * @param {Function} props.onResetError - Callback function when reset fails\r\n * @param {Function} props.onResetStart - Callback function when reset starts\r\n * @param {boolean} props.showConfirmation - Whether to show a confirmation dialog before reset\r\n */\r\nconst ResetOneBox = ({ \r\n  token, \r\n  onResetSuccess, \r\n  onResetError, \r\n  onResetStart,\r\n  showConfirmation = true \r\n}) => {\r\n  const [isResetting, setIsResetting] = useState(false);\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n\r\n  // Function to handle the reset process\r\n  const handleReset = async () => {\r\n    // If confirmation is required and dialog is not shown yet, show it\r\n    if (showConfirmation && !showConfirmDialog) {\r\n      setShowConfirmDialog(true);\r\n      return;\r\n    }\r\n\r\n    // Reset confirmation dialog if it was shown\r\n    setShowConfirmDialog(false);\r\n    \r\n    // Set resetting state\r\n    setIsResetting(true);\r\n    \r\n    // Call the onResetStart callback if provided\r\n    if (onResetStart) {\r\n      onResetStart();\r\n    }\r\n    \r\n    try {\r\n      // Make the API call to reset the OneBox data\r\n      const config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://hiring.reachinbox.xyz/api/v1/onebox/reset',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      };\r\n      \r\n      const response = await axios.request(config);\r\n      console.log(\"Reset response:\", JSON.stringify(response.data));\r\n      \r\n      // Call the onResetSuccess callback if provided\r\n      if (onResetSuccess) {\r\n        onResetSuccess(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error resetting OneBox data:\", error);\r\n      \r\n      // Call the onResetError callback if provided\r\n      if (onResetError) {\r\n        onResetError(error);\r\n      }\r\n    } finally {\r\n      setIsResetting(false);\r\n    }\r\n  };\r\n\r\n  // Function to cancel reset (close confirmation dialog)\r\n  const cancelReset = () => {\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  // Render confirmation dialog if needed\r\n  if (showConfirmDialog) {\r\n    return (\r\n      <div className=\"reset-confirmation\">\r\n        <p className=\"reset-warning\">⚠️ Warning: This will reset all your OneBox data!</p>\r\n        <p>Are you sure you want to reset all data? This action cannot be undone.</p>\r\n        <div className=\"confirmation-actions\">\r\n          <button \r\n            className=\"cancel-button\" \r\n            onClick={cancelReset}\r\n            disabled={isResetting}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button \r\n            className=\"confirm-button\" \r\n            onClick={handleReset}\r\n            disabled={isResetting}\r\n          >\r\n            {isResetting ? 'Resetting...' : 'Confirm Reset'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render reset button\r\n  return (\r\n    <button \r\n      className={`reset-button ${isResetting ? 'resetting' : ''}`}\r\n      onClick={handleReset}\r\n      disabled={isResetting}\r\n      title=\"Reset OneBox Data\"\r\n    >\r\n      {isResetting ? 'Resetting...' : 'Reset Data'}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetOneBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}